rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {
    match /{allPaths=**} {
      allow read, write: if isGod();
    }
    

    match /profiles/{profileID} {
      allow read: if userIsValid();
      allow update: if userIsValid() 
                    && profileWriteIsValid(profileID)
                    

      match /private/private {
        allow read: if userIsValid() 
                    && isDocumentOwner(profileID);
        allow update: if userIsValid() 
                      && isDocumentOwner(profileID)
                      && privateProfileWriteIsValid();
        
      }
    }

    match /chats/{chatID} {
      allow read: if userIsValid() 
                  && isPartOfChat()

      match /messages/{messageID} {
        allow read: if userIsValid() 
                    && isPartOfChat()
        allow create: if userIsValid()
                      && messageWriteIsValid(request.resource.data)

      }
    }

    match /admin/universitiesAllowed {
      allow read;
    }
  }
}

function isGod() {
  return request.auth.token.email in ["archibald.ruban@gmail.com"]
}

function userIsValid() {
  return isAuthenticated() && emailIsAllowed() && emailIsVerified()
}

function profileWriteIsValid(profileID) {
      return isDocumentOwner(profileID) 

    }

function messageWriteIsValid(msg) {
  return msg.keys().hasOnly(["uids", "senderID", "time", "content"])
        && msg.keys().hasAll(["uids", "senderID", "time", "content"])
        && request.auth.uid in msg.uids
        && (msg.uids.size() == 2 && msg.uids[0] is string && msg.uids[1] is string)
        && msg.senderID == request.auth.uid
        && msg.time is timestamp
        && msg.content is string
}

function privateProfileWriteIsValid() {
  return onlyPropertiesModifiedAre(["latestSearchCriteria"])
         && isValidSearchCriteria(request.resource.data["latestSearchCriteria"])
}

function onlyPropertiesModifiedAre(keys) {
  return request.resource.data.diff(resource.data).changedKeys().hasOnly(keys)
  }

function isDocumentOwner(docID) {
  return request.auth.uid == docID
  }

function isPartOfChat() {
  return request.auth.uid in resource.data.uids 
}

// not used directly, for userIsValid()
function isAuthenticated() {
  return request.auth != null
  }

// not used directly, for userIsValid()
function emailIsAllowed() {
  return request.auth.token.email.matches("^[A-Za-z0-9._%+-]+@ucl.ac.uk$") 
  || request.auth.token.email.matches("^[A-Za-z0-9._%+-]+@kcl.ac.uk$")
  || request.auth.token.email in ["archibald.ruban@gmail.com"]
}

// not used directly, for userIsValid()
function emailIsVerified() {
  return request.auth.token.email_verified == true
}

// not used directly, used in privateProfileWriteIsValid()
function isValidSearchCriteria(SC) {
  return SC.keys().hasOnly(["university", "degree", "societyCategory", "areaOfStudy", "interests"])
        && SC.keys().hasAll(["university", "degree", "societyCategory", "areaOfStudy", "interests"])
        && (SC.university is string || SC.university == null)
        && (SC.degree is string || SC.degree == null)
        && (SC.societyCategory is string || SC.societyCategory == null)
        && (SC.areaOfStudy is string || SC.areaOfStudy == null)
        && (SC.interests is string || SC.interests == null)

}



