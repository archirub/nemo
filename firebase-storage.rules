rules_version = '2';
service firebase.storage {
  match /b/{bucket}/o {
    match /{allPaths=**} {
      allow read, write: if true;
    }
     
    match /profilePictures/{uid}/{pictureNumber} {
      allow read: if userIsValid();
      allow create, delete, update: if 
      userIsValid() 
      && isPictureOwner(uid) 
      && pictureNumberIsAllowed(pictureNumber);
    }

  }
}

function isPictureOwner(folderName) {
  return request.auth.uid == folderName
}

// ONLY ACCEPTS UP TO 6 PICTURES RIGHT NOW
function pictureNumberIsAllowed(value) {
  return value.matches("^[0-5]$")
}

function isGod() {
  return request.auth.email in ["archibald.ruban@gmail.com", "zcqsaru@ucl.ac.uk"]
}

function userIsValid() {
  return isAuthenticated() && emailIsAllowed() && emailIsVerified()
}

// not used directly, for userIsValid()
function isAuthenticated() {
  return request.auth != null
  }

// not used directly, for userIsValid()
function emailIsAllowed() {
  return request.auth.token.email.matches("^[A-Za-z0-9._%+-]+@ucl.ac.uk$") 
  || request.auth.token.email.matches("^[A-Za-z0-9._%+-]+@kcl.ac.uk$")
  || request.auth.token.email in ["archibald.ruban@gmail.com"]
}

// not used directly, for userIsValid()
function emailIsVerified() {
  return request.auth.token.email_verified == true
}